"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/colorUtils.ts":
/*!*********************************!*\
  !*** ./src/utils/colorUtils.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateColorScale: () => (/* binding */ generateColorScale),\n/* harmony export */   generateNeutrals: () => (/* binding */ generateNeutrals),\n/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),\n/* harmony export */   hslToRgb: () => (/* binding */ hslToRgb),\n/* harmony export */   rgbToHex: () => (/* binding */ rgbToHex),\n/* harmony export */   rgbToHsl: () => (/* binding */ rgbToHsl)\n/* harmony export */ });\n/**\n * Converts a hex color to RGB components\n */ function hexToRgb(hex) {\n    // Remove the hash if present\n    hex = hex.replace(/^#/, '');\n    // Parse the hex value\n    let r, g, b;\n    if (hex.length === 3) {\n        r = parseInt(hex[0] + hex[0], 16);\n        g = parseInt(hex[1] + hex[1], 16);\n        b = parseInt(hex[2] + hex[2], 16);\n    } else {\n        r = parseInt(hex.substring(0, 2), 16);\n        g = parseInt(hex.substring(2, 4), 16);\n        b = parseInt(hex.substring(4, 6), 16);\n    }\n    return {\n        r,\n        g,\n        b\n    };\n}\n/**\n * Converts RGB components to a hex color\n */ function rgbToHex(r, g, b) {\n    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n/**\n * Converts RGB to HSL components\n */ function rgbToHsl(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const l = (max + min) / 2;\n    if (max !== min) {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max){\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n    return {\n        h,\n        s,\n        l\n    };\n}\n/**\n * Converts HSL to RGB components\n */ function hslToRgb(h, s, l) {\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p, q, t)=>{\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return {\n        r: Math.round(r * 255),\n        g: Math.round(g * 255),\n        b: Math.round(b * 255)\n    };\n}\n/**\n * Generates a color scale based on a base color\n * @param baseColor - The base color in hex format\n * @returns An object with color variants from 50 to 950\n */ function generateColorScale(baseColor) {\n    const rgb = hexToRgb(baseColor);\n    const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);\n    // Define lightness values for each step in the scale\n    const lightnessScale = {\n        '50': 0.97,\n        '100': 0.94,\n        '200': 0.86,\n        '300': 0.76,\n        '400': 0.66,\n        '500': 0.56,\n        '600': 0.46,\n        '700': 0.38,\n        '800': 0.3,\n        '900': 0.22,\n        '950': 0.14\n    };\n    // Adjust saturation based on base color's saturation\n    // For very low or very high saturation colors, we need to adjust to create a balanced scale\n    let saturationAdjust = 1;\n    if (hsl.s < 0.15) {\n        saturationAdjust = 3; // Boost saturation for gray-ish colors\n    } else if (hsl.s > 0.9) {\n        saturationAdjust = 0.85; // Reduce saturation for very saturated colors\n    }\n    const colorScale = {};\n    // Generate each step in the scale\n    Object.entries(lightnessScale).forEach((param)=>{\n        let [step, lightness] = param;\n        // Adjust saturation based on lightness\n        // Lighter colors should be less saturated, darker colors more saturated\n        let adjustedSaturation = hsl.s;\n        if (lightness > 0.7) {\n            adjustedSaturation = Math.min(1, hsl.s * 0.8 * saturationAdjust);\n        } else if (lightness < 0.3) {\n            adjustedSaturation = Math.min(1, hsl.s * 1.2 * saturationAdjust);\n        } else {\n            adjustedSaturation = Math.min(1, hsl.s * saturationAdjust);\n        }\n        const color = hslToRgb(hsl.h, adjustedSaturation, lightness);\n        colorScale[step] = rgbToHex(color.r, color.g, color.b);\n    });\n    return colorScale;\n}\n/**\n * Generates a set of neutral/grey colors that are derived from the primary color\n * @param primaryColor - The primary color in hex format\n * @returns An object with neutral color variants from 50 to 950\n */ function generateNeutrals(primaryColor) {\n    const rgb = hexToRgb(primaryColor);\n    const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);\n    // Derive a neutral palette by:\n    // 1. Taking the hue from the primary color\n    // 2. Significantly reducing the saturation\n    // 3. Using a similar lightness scale as the color scale\n    // Create a slight hue shift for more interesting neutrals\n    // Move the hue slightly toward blue for cool greys or toward orange for warm greys\n    // Based on where the original hue is located\n    let neutralHue = hsl.h;\n    // If the hue is in the blue/green range, shift toward warmer grey\n    if (neutralHue > 0.3 && neutralHue < 0.7) {\n        neutralHue = (neutralHue + 0.05) % 1; // Shift slightly warmer\n    } else {\n        // If the hue is in the red/orange/yellow range, shift toward cooler grey\n        neutralHue = (neutralHue + 0.95) % 1; // Shift slightly cooler\n    }\n    // Very low saturation for neutrals, but keep a hint of the color influence\n    const baseSaturation = Math.min(0.08, hsl.s * 0.12);\n    // Define lightness values for each step in the neutral scale\n    const lightnessScale = {\n        '50': 0.98,\n        '100': 0.94,\n        '200': 0.88,\n        '300': 0.78,\n        '400': 0.66,\n        '500': 0.54,\n        '600': 0.42,\n        '700': 0.32,\n        '800': 0.22,\n        '900': 0.14,\n        '950': 0.09\n    };\n    const neutralScale = {};\n    // Generate each step in the scale\n    Object.entries(lightnessScale).forEach((param)=>{\n        let [step, lightness] = param;\n        // Adjust saturation based on lightness\n        // Very dark and very light colors get even less saturation\n        let adjustedSaturation = baseSaturation;\n        if (lightness > 0.9 || lightness < 0.2) {\n            adjustedSaturation = baseSaturation * 0.5;\n        }\n        const color = hslToRgb(neutralHue, adjustedSaturation, lightness);\n        neutralScale[step] = rgbToHex(color.r, color.g, color.b);\n    });\n    return neutralScale;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/colorUtils.ts\n"));

/***/ })

});