/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fcontext%2FDesignSystemContext.tsx%22%2C%22ids%22%3A%5B%22DesignSystemProvider%22%5D%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fcontext%2FDesignSystemContext.tsx%22%2C%22ids%22%3A%5B%22DesignSystemProvider%22%5D%7D&server=false! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src/app/layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/context/DesignSystemContext.tsx */ \"(app-pages-browser)/./src/context/DesignSystemContext.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZuYXRlJTJGcHJvamVjdHMlMkZkZXNpZ24tc3lzdGVtLWJ1aWxkZXIlMkZzcmMlMkZhcHAlMkZnbG9iYWxzLmNzcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRm5hdGUlMkZwcm9qZWN0cyUyRmRlc2lnbi1zeXN0ZW0tYnVpbGRlciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZmb250JTJGZ29vZ2xlJTJGdGFyZ2V0LmNzcyUzRiU3QiU1QyUyMnBhdGglNUMlMjIlM0ElNUMlMjJzcmMlMkZhcHAlMkZsYXlvdXQudHN4JTVDJTIyJTJDJTVDJTIyaW1wb3J0JTVDJTIyJTNBJTVDJTIySW50ZXIlNUMlMjIlMkMlNUMlMjJhcmd1bWVudHMlNUMlMjIlM0ElNUIlN0IlNUMlMjJzdWJzZXRzJTVDJTIyJTNBJTVCJTVDJTIybGF0aW4lNUMlMjIlNUQlN0QlNUQlMkMlNUMlMjJ2YXJpYWJsZU5hbWUlNUMlMjIlM0ElNUMlMjJpbnRlciU1QyUyMiU3RCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRm5hdGUlMkZwcm9qZWN0cyUyRmRlc2lnbi1zeXN0ZW0tYnVpbGRlciUyRnNyYyUyRmNvbnRleHQlMkZEZXNpZ25TeXN0ZW1Db250ZXh0LnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMkRlc2lnblN5c3RlbVByb3ZpZGVyJTIyJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsb0tBQW1HO0FBQ25HO0FBQ0EsMGJBQW9QO0FBQ3BQO0FBQ0Esb01BQTZKIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvbmF0ZS9wcm9qZWN0cy9kZXNpZ24tc3lzdGVtLWJ1aWxkZXIvc3JjL2FwcC9nbG9iYWxzLmNzc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL25hdGUvcHJvamVjdHMvZGVzaWduLXN5c3RlbS1idWlsZGVyL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1xcXCJwYXRoXFxcIjpcXFwic3JjL2FwcC9sYXlvdXQudHN4XFxcIixcXFwiaW1wb3J0XFxcIjpcXFwiSW50ZXJcXFwiLFxcXCJhcmd1bWVudHNcXFwiOlt7XFxcInN1YnNldHNcXFwiOltcXFwibGF0aW5cXFwiXX1dLFxcXCJ2YXJpYWJsZU5hbWVcXFwiOlxcXCJpbnRlclxcXCJ9XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJEZXNpZ25TeXN0ZW1Qcm92aWRlclwiXSAqLyBcIi9Vc2Vycy9uYXRlL3Byb2plY3RzL2Rlc2lnbi1zeXN0ZW0tYnVpbGRlci9zcmMvY29udGV4dC9EZXNpZ25TeXN0ZW1Db250ZXh0LnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fcontext%2FDesignSystemContext.tsx%22%2C%22ids%22%3A%5B%22DesignSystemProvider%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={529:(e,r,t)=>{var n=t(191);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},191:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(529);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLGFBQWEsT0FBTyxjQUFjLGFBQWEsMEJBQTBCLG9DQUFvQyw4QkFBOEIsdUJBQXVCLFFBQVEsa0JBQWtCLFdBQVcsZ0JBQWdCLDhCQUE4QixxQkFBcUIsZ0JBQWdCLG1CQUFtQixpQkFBaUIsZ0NBQWdDLFdBQVcsT0FBTywyQkFBMkIsNkJBQTZCLEtBQUssOENBQThDLG9CQUFvQixNQUFNLFNBQVMsT0FBTyxtQkFBbUIsT0FBTyxZQUFZLGdDQUFnQyxjQUFjLE9BQU8sZ0NBQWdDLE9BQU8sZ0NBQWdDLHFDQUFxQyw0Q0FBNEMsMkNBQTJDLFNBQVMsZ0JBQWdCLElBQUksd0JBQXdCLE9BQU8sWUFBWSxPQUFPLHVCQUF1QixxQkFBcUIsT0FBTyx1QkFBdUIsT0FBTyxnQ0FBZ0MsT0FBTyxlQUFlLG9CQUFvQixpQkFBaUIsc0NBQXNDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsdUNBQXVDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsMkNBQTJDLGtCQUFrQiwyQ0FBMkMsS0FBSyw2QkFBNkIsMkJBQTJCLE1BQU0sT0FBTyxlQUFlLEVBQUUsb0JBQW9CLG9CQUFvQixLQUFLLEdBQUcsU0FBUyx3QkFBd0IsT0FBTyxhQUFhLHdDQUF3QyxZQUFZLHNCQUFzQixZQUFZLE9BQU8sNkJBQTZCLHFCQUFxQixPQUFPLHFCQUFxQixPQUFPLE1BQU0sZUFBZSxRQUFRLEdBQUcsU0FBUyxxQkFBcUIsd0NBQXdDLHNCQUFzQixxQkFBcUIsT0FBTyxhQUFhLEdBQUcseUJBQXlCLHlDQUF5QyxhQUFhLFlBQVksd0JBQXdCLE1BQU0sMERBQTBELFlBQVksNkJBQTZCLGtCQUFrQixvQkFBb0IscUJBQXFCLGFBQWEsZ0VBQWdFLFlBQVksT0FBTyxNQUFNLCtDQUErQyxLQUFLLG9DQUFvQyxhQUFhLDRCQUE0QixTQUFTLHlCQUF5QiwrQkFBK0IsVUFBVSxpQkFBaUIsTUFBTSxjQUFjLGtCQUFrQixTQUFTLGdCQUFnQixzQkFBc0IsV0FBVyxzQkFBc0IsU0FBUyxvREFBb0QsaURBQWlELDJDQUEyQyxRQUFRLHNCQUFzQixnQkFBZ0IsU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsiL1VzZXJzL25hdGUvcHJvamVjdHMvZGVzaWduLXN5c3RlbS1idWlsZGVyL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXs1Mjk6KGUscix0KT0+e3ZhciBuPXQoMTkxKTt2YXIgaT1PYmplY3QuY3JlYXRlKG51bGwpO3ZhciBhPXR5cGVvZiBkb2N1bWVudD09PVwidW5kZWZpbmVkXCI7dmFyIG89QXJyYXkucHJvdG90eXBlLmZvckVhY2g7ZnVuY3Rpb24gZGVib3VuY2UoZSxyKXt2YXIgdD0wO3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXRoaXM7dmFyIGk9YXJndW1lbnRzO3ZhciBhPWZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpe3JldHVybiBlLmFwcGx5KG4saSl9O2NsZWFyVGltZW91dCh0KTt0PXNldFRpbWVvdXQoYSxyKX19ZnVuY3Rpb24gbm9vcCgpe31mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKGUpe3ZhciByPWlbZV07aWYoIXIpe2lmKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpe3I9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmN9ZWxzZXt2YXIgdD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTt2YXIgYT10W3QubGVuZ3RoLTFdO2lmKGEpe3I9YS5zcmN9fWlbZV09cn1yZXR1cm4gZnVuY3Rpb24oZSl7aWYoIXIpe3JldHVybiBudWxsfXZhciB0PXIuc3BsaXQoLyhbXlxcXFwvXSspXFwuanMkLyk7dmFyIGk9dCYmdFsxXTtpZighaSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19aWYoIWUpe3JldHVybltyLnJlcGxhY2UoXCIuanNcIixcIi5jc3NcIildfXJldHVybiBlLnNwbGl0KFwiLFwiKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBSZWdFeHAoXCJcIi5jb25jYXQoaSxcIlxcXFwuanMkXCIpLFwiZ1wiKTtyZXR1cm4gbihyLnJlcGxhY2UodCxcIlwiLmNvbmNhdChlLnJlcGxhY2UoL3tmaWxlTmFtZX0vZyxpKSxcIi5jc3NcIikpKX0pKX19ZnVuY3Rpb24gdXBkYXRlQ3NzKGUscil7aWYoIXIpe2lmKCFlLmhyZWYpe3JldHVybn1yPWUuaHJlZi5zcGxpdChcIj9cIilbMF19aWYoIWlzVXJsUmVxdWVzdChyKSl7cmV0dXJufWlmKGUuaXNMb2FkZWQ9PT1mYWxzZSl7cmV0dXJufWlmKCFyfHwhKHIuaW5kZXhPZihcIi5jc3NcIik+LTEpKXtyZXR1cm59ZS52aXNpdGVkPXRydWU7dmFyIHQ9ZS5jbG9uZU5vZGUoKTt0LmlzTG9hZGVkPWZhbHNlO3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwoZnVuY3Rpb24oKXtpZih0LmlzTG9hZGVkKXtyZXR1cm59dC5pc0xvYWRlZD10cnVlO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX0pKTt0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuaHJlZj1cIlwiLmNvbmNhdChyLFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7aWYoZS5uZXh0U2libGluZyl7ZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LGUubmV4dFNpYmxpbmcpfWVsc2V7ZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHQpfX1mdW5jdGlvbiBnZXRSZWxvYWRVcmwoZSxyKXt2YXIgdDtlPW4oZSx7c3RyaXBXV1c6ZmFsc2V9KTtyLnNvbWUoKGZ1bmN0aW9uKG4pe2lmKGUuaW5kZXhPZihyKT4tMSl7dD1ufX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRTdHlsZShlKXtpZighZSl7cmV0dXJuIGZhbHNlfXZhciByPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO3ZhciB0PWZhbHNlO28uY2FsbChyLChmdW5jdGlvbihyKXtpZighci5ocmVmKXtyZXR1cm59dmFyIG49Z2V0UmVsb2FkVXJsKHIuaHJlZixlKTtpZighaXNVcmxSZXF1ZXN0KG4pKXtyZXR1cm59aWYoci52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufWlmKG4pe3VwZGF0ZUNzcyhyLG4pO3Q9dHJ1ZX19KSk7cmV0dXJuIHR9ZnVuY3Rpb24gcmVsb2FkQWxsKCl7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7by5jYWxsKGUsKGZ1bmN0aW9uKGUpe2lmKGUudmlzaXRlZD09PXRydWUpe3JldHVybn11cGRhdGVDc3MoZSl9KSl9ZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KGUpe2lmKCEvXlthLXpBLVpdW2EtekEtWlxcZCtcXC0uXSo6Ly50ZXN0KGUpKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9ZS5leHBvcnRzPWZ1bmN0aW9uKGUscil7aWYoYSl7Y29uc29sZS5sb2coXCJubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1NcIik7cmV0dXJuIG5vb3B9dmFyIHQ9Z2V0Q3VycmVudFNjcmlwdFVybChlKTtmdW5jdGlvbiB1cGRhdGUoKXt2YXIgZT10KHIuZmlsZW5hbWUpO3ZhciBuPXJlbG9hZFN0eWxlKGUpO2lmKHIubG9jYWxzKXtjb25zb2xlLmxvZyhcIltITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzc1wiKTtyZWxvYWRBbGwoKTtyZXR1cm59aWYobil7Y29uc29sZS5sb2coXCJbSE1SXSBjc3MgcmVsb2FkICVzXCIsZS5qb2luKFwiIFwiKSl9ZWxzZXtjb25zb2xlLmxvZyhcIltITVJdIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpfX1yZXR1cm4gZGVib3VuY2UodXBkYXRlLDUwKX19LDE5MTplPT57ZnVuY3Rpb24gbm9ybWFsaXplVXJsKGUpe3JldHVybiBlLnJlZHVjZSgoZnVuY3Rpb24oZSxyKXtzd2l0Y2gocil7Y2FzZVwiLi5cIjplLnBvcCgpO2JyZWFrO2Nhc2VcIi5cIjpicmVhaztkZWZhdWx0OmUucHVzaChyKX1yZXR1cm4gZX0pLFtdKS5qb2luKFwiL1wiKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7ZT1lLnRyaW0oKTtpZigvXmRhdGE6L2kudGVzdChlKSl7cmV0dXJuIGV9dmFyIHI9ZS5pbmRleE9mKFwiLy9cIikhPT0tMT9lLnNwbGl0KFwiLy9cIilbMF0rXCIvL1wiOlwiXCI7dmFyIHQ9ZS5yZXBsYWNlKG5ldyBSZWdFeHAocixcImlcIiksXCJcIikuc3BsaXQoXCIvXCIpO3ZhciBuPXRbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLyxcIlwiKTt0WzBdPVwiXCI7dmFyIGk9bm9ybWFsaXplVXJsKHQpO3JldHVybiByK24raX19fTt2YXIgcj17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHQpe3ZhciBuPXJbdF07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT1yW3RdPXtleHBvcnRzOnt9fTt2YXIgYT10cnVlO3RyeXtlW3RdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO2E9ZmFsc2V9ZmluYWxseXtpZihhKWRlbGV0ZSByW3RdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciB0PV9fbmNjd3Bja19yZXF1aXJlX18oNTI5KTttb2R1bGUuZXhwb3J0cz10fSkoKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray;\n    new (\"function\" === typeof WeakMap ? WeakMap : Map)();\n    var createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          },\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        source,\n        self,\n        Error(\"react-stack-top-frame\"),\n        createTask(getTaskName(type))\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYXRlL3Byb2plY3RzL2Rlc2lnbi1zeXN0ZW0tYnVpbGRlci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"src/app/layout.tsx","import":"Inter","arguments":[{"subsets":["latin"]}],"variableName":"inter"} ***!
  \************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Inter', 'Inter Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_d65c78\"};\n    if(true) {\n      // 1741056663267\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwic3JjL2FwcC9sYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkludGVyXCIsXCJhcmd1bWVudHNcIjpbe1wic3Vic2V0c1wiOltcImxhdGluXCJdfV0sXCJ2YXJpYWJsZU5hbWVcIjpcImludGVyXCJ9IiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLFNBQVMsOERBQThEO0FBQ3pGLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLHdNQUFnSSxjQUFjLHNEQUFzRDtBQUNsTyxNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbmF0ZS9wcm9qZWN0cy9kZXNpZ24tc3lzdGVtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL25leHQvZm9udC9nb29nbGUvdGFyZ2V0LmNzcz97XCJwYXRoXCI6XCJzcmMvYXBwL2xheW91dC50c3hcIixcImltcG9ydFwiOlwiSW50ZXJcIixcImFyZ3VtZW50c1wiOlt7XCJzdWJzZXRzXCI6W1wibGF0aW5cIl19XSxcInZhcmlhYmxlTmFtZVwiOlwiaW50ZXJcIn0iXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0eWxlXCI6e1wiZm9udEZhbWlseVwiOlwiJ0ludGVyJywgJ0ludGVyIEZhbGxiYWNrJ1wiLFwiZm9udFN0eWxlXCI6XCJub3JtYWxcIn0sXCJjbGFzc05hbWVcIjpcIl9fY2xhc3NOYW1lX2Q2NWM3OFwifTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzQxMDU2NjYzMjY3XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi9Vc2Vycy9uYXRlL3Byb2plY3RzL2Rlc2lnbi1zeXN0ZW0tYnVpbGRlci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi9fbmV4dC9cIixcImVzTW9kdWxlXCI6ZmFsc2UsXCJsb2NhbHNcIjp0cnVlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIFxuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"900f0203595c\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvbmF0ZS9wcm9qZWN0cy9kZXNpZ24tc3lzdGVtLWJ1aWxkZXIvc3JjL2FwcC9nbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjkwMGYwMjAzNTk1Y1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/DesignSystemContext.tsx":
/*!*********************************************!*\
  !*** ./src/context/DesignSystemContext.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DesignSystemProvider: () => (/* binding */ DesignSystemProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useDesignSystem: () => (/* binding */ useDesignSystem)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/colorUtils */ \"(app-pages-browser)/./src/utils/colorUtils.ts\");\n/* __next_internal_client_entry_do_not_use__ DesignSystemProvider,useDesignSystem,default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n// Create context with default values\nconst DesignSystemContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst DesignSystemProvider = (param)=>{\n    let { children, initialPrimaryColor = '#3b82f6', initialAccentColor = '#ec4899' } = param;\n    _s();\n    // Base colors\n    const [primaryColor, setPrimaryColor] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialPrimaryColor);\n    const [primaryColorScale, setPrimaryColorScale] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.generateColorScale)(initialPrimaryColor));\n    const [accentColor, setAccentColor] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialAccentColor);\n    const [accentColorScale, setAccentColorScale] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.generateColorScale)(initialAccentColor));\n    // Neutral color (derived from primary by default)\n    const [neutralColor, setNeutralColor] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialPrimaryColor);\n    const [neutralColorScale, setNeutralColorScale] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.generateNeutrals)(initialPrimaryColor));\n    // Curve control points\n    const [lightnessControlPoints, setLightnessControlPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [chromaControlPoints, setChromaControlPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Method to set a base color and update its scale\n    const setBaseColor = (type, color)=>{\n        switch(type){\n            case 'primary':\n                setPrimaryColor(color);\n                // Update primary color scale\n                const primaryScale = lightnessControlPoints.length > 0 || chromaControlPoints.length > 0 ? (0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.applyColorCurves)(color, lightnessControlPoints, chromaControlPoints) : (0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.generateColorScale)(color);\n                setPrimaryColorScale(primaryScale);\n                // Also update neutral by default when primary changes\n                setNeutralColor(color);\n                // Generate neutrals based on the primary color\n                const neutralScale = (0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.generateNeutrals)(color);\n                setNeutralColorScale(neutralScale);\n                break;\n            case 'accent':\n                setAccentColor(color);\n                const accentScale = lightnessControlPoints.length > 0 || chromaControlPoints.length > 0 ? (0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.applyColorCurves)(color, lightnessControlPoints, chromaControlPoints) : (0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.generateColorScale)(color);\n                setAccentColorScale(accentScale);\n                break;\n            case 'neutral':\n                setNeutralColor(color);\n                // Generate neutrals based on the selected color\n                const newNeutralScale = (0,_utils_colorUtils__WEBPACK_IMPORTED_MODULE_2__.generateNeutrals)(color);\n                setNeutralColorScale(newNeutralScale);\n                break;\n        }\n    };\n    const value = {\n        primaryColor,\n        setPrimaryColor,\n        primaryColorScale,\n        setPrimaryColorScale,\n        accentColor,\n        setAccentColor,\n        accentColorScale,\n        setAccentColorScale,\n        neutralColor,\n        setNeutralColor,\n        neutralColorScale,\n        setNeutralColorScale,\n        setBaseColor,\n        lightnessControlPoints,\n        setLightnessControlPoints,\n        chromaControlPoints,\n        setChromaControlPoints\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DesignSystemContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/nate/projects/design-system-builder/src/context/DesignSystemContext.tsx\",\n        lineNumber: 157,\n        columnNumber: 5\n    }, undefined);\n};\n_s(DesignSystemProvider, \"AO0Z+GfIAvKU/J4cnSINXoMdRJI=\");\n_c = DesignSystemProvider;\n// Custom hook to use the design system context\nconst useDesignSystem = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DesignSystemContext);\n    if (context === undefined) {\n        throw new Error('useDesignSystem must be used within a DesignSystemProvider');\n    }\n    return context;\n};\n_s1(useDesignSystem, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DesignSystemContext);\nvar _c;\n$RefreshReg$(_c, \"DesignSystemProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/DesignSystemContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/utils/colorUtils.ts":
/*!*********************************!*\
  !*** ./src/utils/colorUtils.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OKLCHToHex: () => (/* binding */ OKLCHToHex),\n/* harmony export */   applyColorCurves: () => (/* binding */ applyColorCurves),\n/* harmony export */   generateChromaPoints: () => (/* binding */ generateChromaPoints),\n/* harmony export */   generateColorScale: () => (/* binding */ generateColorScale),\n/* harmony export */   generateCurvePoints: () => (/* binding */ generateCurvePoints),\n/* harmony export */   generateCustomColorScale: () => (/* binding */ generateCustomColorScale),\n/* harmony export */   generateNeutrals: () => (/* binding */ generateNeutrals),\n/* harmony export */   getCurvePathDefinition: () => (/* binding */ getCurvePathDefinition),\n/* harmony export */   hexToHsl: () => (/* binding */ hexToHsl),\n/* harmony export */   hexToOKLCH: () => (/* binding */ hexToOKLCH),\n/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),\n/* harmony export */   hslToHex: () => (/* binding */ hslToHex),\n/* harmony export */   hslToRgb: () => (/* binding */ hslToRgb),\n/* harmony export */   rgbToHex: () => (/* binding */ rgbToHex),\n/* harmony export */   rgbToHsl: () => (/* binding */ rgbToHsl),\n/* harmony export */   uiPointsToControlPoints: () => (/* binding */ uiPointsToControlPoints)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ hexToRgb,rgbToHex,rgbToHsl,hslToRgb,generateColorScale,generateCustomColorScale,uiPointsToControlPoints,generateNeutrals,generateCurvePoints,generateChromaPoints,getCurvePathDefinition,hexToOKLCH,OKLCHToHex,hexToHsl,applyColorCurves,hslToHex auto */ /**\n * Converts a hex color to RGB components\n */ function hexToRgb(hex) {\n    // Remove the hash if present\n    hex = hex.replace(/^#/, '');\n    // Parse the hex value\n    let r, g, b;\n    if (hex.length === 3) {\n        r = parseInt(hex[0] + hex[0], 16);\n        g = parseInt(hex[1] + hex[1], 16);\n        b = parseInt(hex[2] + hex[2], 16);\n    } else {\n        r = parseInt(hex.substring(0, 2), 16);\n        g = parseInt(hex.substring(2, 4), 16);\n        b = parseInt(hex.substring(4, 6), 16);\n    }\n    return {\n        r,\n        g,\n        b\n    };\n}\n/**\n * Converts RGB components to a hex color\n */ function rgbToHex(r, g, b) {\n    return '#' + (1 << 24 | r << 16 | g << 8 | b).toString(16).slice(1);\n}\n/**\n * Converts RGB to HSL components\n */ function rgbToHsl(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const l = (max + min) / 2;\n    if (max !== min) {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max){\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n    return {\n        h,\n        s,\n        l\n    };\n}\n/**\n * Converts HSL to RGB components\n */ function hslToRgb(h, s, l) {\n    let r, g, b;\n    if (s === 0) {\n        // achromatic\n        r = g = b = l;\n    } else {\n        const hue2rgb = (p, q, t)=>{\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return {\n        r: Math.round(r * 255),\n        g: Math.round(g * 255),\n        b: Math.round(b * 255)\n    };\n}\n/**\n * Generates a color scale based on a base color\n * @param baseColor - The base color in hex format\n * @returns An object with color variants from 50 to 950\n */ function generateColorScale(baseColor) {\n    const rgb = hexToRgb(baseColor);\n    const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);\n    // Define lightness values for each step in the scale\n    const lightnessScale = {\n        '50': 0.97,\n        '100': 0.94,\n        '200': 0.86,\n        '300': 0.76,\n        '400': 0.66,\n        '500': 0.56,\n        '600': 0.46,\n        '700': 0.38,\n        '800': 0.3,\n        '900': 0.22,\n        '950': 0.14\n    };\n    // Adjust saturation based on base color's saturation\n    // For very low or very high saturation colors, we need to adjust to create a balanced scale\n    let saturationAdjust = 1;\n    if (hsl.s < 0.15) {\n        saturationAdjust = 3; // Boost saturation for gray-ish colors\n    } else if (hsl.s > 0.9) {\n        saturationAdjust = 0.85; // Reduce saturation for very saturated colors\n    }\n    const colorScale = {};\n    // Generate each step in the scale\n    Object.entries(lightnessScale).forEach((param)=>{\n        let [step, lightness] = param;\n        // Adjust saturation based on lightness\n        // Lighter colors should be less saturated, darker colors more saturated\n        let adjustedSaturation = hsl.s;\n        if (lightness > 0.7) {\n            adjustedSaturation = Math.min(1, hsl.s * 0.8 * saturationAdjust);\n        } else if (lightness < 0.3) {\n            adjustedSaturation = Math.min(1, hsl.s * 1.2 * saturationAdjust);\n        } else {\n            adjustedSaturation = Math.min(1, hsl.s * saturationAdjust);\n        }\n        const color = hslToRgb(hsl.h, adjustedSaturation, lightness);\n        colorScale[step] = rgbToHex(color.r, color.g, color.b);\n    });\n    return colorScale;\n}\n/**\n * Generates a color scale based on a base color and custom control points\n * @param baseColor - The base color in hex format\n * @param controlPoints - Array of control points to shape the curve\n * @returns An object with color variants from 50 to 950\n */ function generateCustomColorScale(baseColor) {\n    let controlPoints = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const rgb = hexToRgb(baseColor);\n    const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);\n    // Define the default shade positions on a scale of 0-1\n    const shadePositions = {\n        '50': 0,\n        '100': 0.1,\n        '200': 0.2,\n        '300': 0.3,\n        '400': 0.4,\n        '500': 0.5,\n        '600': 0.6,\n        '700': 0.7,\n        '800': 0.8,\n        '900': 0.9,\n        '950': 1\n    };\n    // If no control points are provided, create default ones\n    if (controlPoints.length === 0) {\n        controlPoints = [\n            {\n                position: 0,\n                lightness: 0.97\n            },\n            {\n                position: 0.25,\n                lightness: 0.85\n            },\n            {\n                position: 0.5,\n                lightness: 0.56\n            },\n            {\n                position: 0.75,\n                lightness: 0.32\n            },\n            {\n                position: 1,\n                lightness: 0.14\n            }\n        ];\n    }\n    // Make sure control points are sorted by position\n    controlPoints.sort((a, b)=>a.position - b.position);\n    const colorScale = {};\n    // Generate each step in the scale\n    Object.entries(shadePositions).forEach((param)=>{\n        let [shade, position] = param;\n        // Find the control points to interpolate between\n        let beforePoint = controlPoints[0];\n        let afterPoint = controlPoints[controlPoints.length - 1];\n        for(let i = 0; i < controlPoints.length - 1; i++){\n            const current = controlPoints[i];\n            const next = controlPoints[i + 1];\n            if (position >= current.position && position <= next.position) {\n                beforePoint = current;\n                afterPoint = next;\n                break;\n            }\n        }\n        // Interpolate lightness between control points\n        const t = (position - beforePoint.position) / (afterPoint.position - beforePoint.position || 1);\n        // Get lightness values with proper undefined checks\n        const beforeLightness = beforePoint.lightness !== undefined ? beforePoint.lightness : 0.5;\n        const afterLightness = afterPoint.lightness !== undefined ? afterPoint.lightness : 0.5;\n        const interpolatedLightness = beforeLightness + t * (afterLightness - beforeLightness);\n        // Determine the saturation for this shade\n        let adjustedSaturation = hsl.s;\n        // If saturation is specified in control points, interpolate it too\n        if (beforePoint.saturation !== undefined && afterPoint.saturation !== undefined) {\n            adjustedSaturation = beforePoint.saturation + t * (afterPoint.saturation - beforePoint.saturation);\n        } else {\n            // Default saturation behavior - lighter colors are less saturated\n            if (interpolatedLightness > 0.7) {\n                adjustedSaturation = hsl.s * 0.8;\n            } else if (interpolatedLightness < 0.3) {\n                adjustedSaturation = Math.min(1, hsl.s * 1.2);\n            }\n        }\n        // Ensure saturation is within bounds\n        adjustedSaturation = Math.max(0, Math.min(1, adjustedSaturation));\n        // Generate the color using the calculated values\n        const color = hslToRgb(hsl.h, adjustedSaturation, interpolatedLightness);\n        colorScale[shade] = rgbToHex(color.r, color.g, color.b);\n    });\n    return colorScale;\n}\n/**\n * Converts UI bezier curve points (x,y) to CurveControlPoint format\n * @param points Array of UI points from the BezierCurveEditor\n * @param isChroma Whether the points are for chroma curves (true) or lightness curves (false)\n * @returns Array of CurveControlPoint for use in color generation\n */ function uiPointsToControlPoints(points, isChroma) {\n    return points.map((point)=>{\n        // Normalize to 0-1 range\n        const position = point.x / 320;\n        const normalizedY = 1 - point.y / 320;\n        const controlPoint = {\n            position\n        };\n        if (isChroma) {\n            // For chroma curve, y controls saturation\n            controlPoint.saturation = normalizedY;\n        } else {\n            // For lightness curve, y controls lightness\n            controlPoint.lightness = normalizedY;\n        }\n        return controlPoint;\n    });\n}\n/**\n * Generates a set of neutral/grey colors that are derived from the primary color\n * @param primaryColor - The primary color in hex format\n * @returns An object with neutral color variants from 50 to 950\n */ function generateNeutrals(primaryColor) {\n    const primaryHsl = rgbToHsl(hexToRgb(primaryColor).r, hexToRgb(primaryColor).g, hexToRgb(primaryColor).b);\n    const neutralScale = {};\n    // Light shades (50-500)\n    for(let i = 0; i < 6; i++){\n        const shade = [\n            50,\n            100,\n            200,\n            300,\n            400,\n            500\n        ][i];\n        const lightness = 0.98 - i * 0.08; // 0.98 down to 0.58\n        // Create a very subtle hint of the primary hue\n        // Using a saturation that decreases as the shade gets lighter\n        const saturationFactor = 0.08 - i * 0.01;\n        const saturation = primaryHsl.s * saturationFactor;\n        neutralScale[shade.toString()] = hslToHex({\n            h: primaryHsl.h,\n            s: saturation,\n            l: lightness\n        });\n    }\n    // Dark shades (600-950)\n    for(let i = 0; i < 5; i++){\n        const shade = [\n            600,\n            700,\n            800,\n            900,\n            950\n        ][i];\n        const lightness = 0.48 - i * 0.08; // 0.48 down to 0.16\n        // For darker shades, slightly increase the saturation for visual interest\n        // but still keep it very subtle\n        const saturationFactor = 0.06 - i * 0.005;\n        const saturation = primaryHsl.s * saturationFactor;\n        neutralScale[shade.toString()] = hslToHex({\n            h: primaryHsl.h,\n            s: saturation,\n            l: lightness\n        });\n    }\n    return neutralScale;\n}\n/**\n * Calculates points to draw a color curve for a range of color shades\n * @param colorScale - Object containing the color scale\n * @param rangeStart - Starting shade (e.g. \"50\", \"600\")\n * @param rangeEnd - Ending shade (e.g. \"400\", \"950\")\n * @returns Array of points to draw the curve\n */ function generateCurvePoints(colorScale, rangeStart, rangeEnd) {\n    const points = [];\n    const shades = Object.keys(colorScale).sort((a, b)=>parseInt(a) - parseInt(b));\n    // Filter to only include shades within our range\n    const rangeShades = shades.filter((shade)=>{\n        const value = parseInt(shade);\n        return value >= parseInt(rangeStart) && value <= parseInt(rangeEnd);\n    });\n    if (rangeShades.length === 0) return points;\n    // Get first and last shade for normalization\n    const firstShade = parseInt(rangeShades[0]);\n    const lastShade = parseInt(rangeShades[rangeShades.length - 1]);\n    const range = lastShade - firstShade;\n    // Extract lightness values\n    rangeShades.forEach((shade)=>{\n        const color = colorScale[shade];\n        const hsl = rgbToHsl(hexToRgb(color).r, hexToRgb(color).g, hexToRgb(color).b);\n        // Calculate x position based on shade number\n        const x = (parseInt(shade) - firstShade) / range;\n        // y is inverted (1 - lightness) since in UI 0,0 is top left\n        const y = 1 - hsl.l;\n        points.push({\n            x,\n            y\n        });\n    });\n    return points;\n}\n/**\n * Calculates points to visualize chroma (saturation) for a range of color shades\n * @param colorScale - Object containing the color scale\n * @param rangeStart - Starting shade (e.g. \"50\", \"600\")\n * @param rangeEnd - Ending shade (e.g. \"400\", \"950\")\n * @returns Array of points with their positions and colors\n */ function generateChromaPoints(colorScale, rangeStart, rangeEnd) {\n    // Get all the shades between rangeStart and rangeEnd\n    const orderedShades = [\n        '50',\n        '100',\n        '200',\n        '300',\n        '400',\n        '500',\n        '600',\n        '700',\n        '800',\n        '900',\n        '950'\n    ];\n    const startIndex = orderedShades.indexOf(rangeStart);\n    const endIndex = orderedShades.indexOf(rangeEnd);\n    if (startIndex === -1 || endIndex === -1) {\n        throw new Error(\"Invalid range: \".concat(rangeStart, \"-\").concat(rangeEnd));\n    }\n    const shades = orderedShades.slice(Math.min(startIndex, endIndex), Math.max(startIndex, endIndex) + 1);\n    // Select a few representative points for the chroma visualization\n    // We'll use 3 points: start, middle, and end of the range\n    const chromaPoints = [];\n    // Choose 3 points from the range\n    const pointIndices = [\n        0,\n        Math.floor(shades.length / 2),\n        shades.length - 1\n    ];\n    pointIndices.forEach((pointIndex)=>{\n        const shade = shades[pointIndex];\n        const color = colorScale[shade];\n        const rgb = hexToRgb(color);\n        const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);\n        // Normalize the x position for the canvas\n        const x = startIndex < endIndex ? pointIndex / (shades.length - 1) : 1 - pointIndex / (shades.length - 1);\n        // Y position based on saturation\n        const y = 1 - hsl.s;\n        chromaPoints.push({\n            x,\n            y,\n            color\n        });\n    });\n    return chromaPoints;\n}\n// Get the SVG path definition for a curve\nfunction getCurvePathDefinition(points, width, height) {\n    let padding = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 20;\n    if (points.length < 2) return '';\n    const drawWidth = width - padding * 2;\n    const drawHeight = height - padding * 2;\n    // Map normalized points to SVG coordinates\n    const mappedPoints = points.map((point)=>({\n            x: padding + point.x * drawWidth,\n            y: padding + point.y * drawHeight\n        }));\n    // Start the path\n    let path = \"M \".concat(mappedPoints[0].x, \",\").concat(mappedPoints[0].y);\n    // For a smooth curve, use cubic bezier curves between points\n    for(let i = 0; i < mappedPoints.length - 1; i++){\n        const current = mappedPoints[i];\n        const next = mappedPoints[i + 1];\n        // Calculate control points for a smooth curve\n        const controlPointX1 = current.x + (next.x - current.x) * 0.5;\n        const controlPointY1 = current.y;\n        const controlPointX2 = next.x - (next.x - current.x) * 0.5;\n        const controlPointY2 = next.y;\n        path += \" C \".concat(controlPointX1, \",\").concat(controlPointY1, \" \").concat(controlPointX2, \",\").concat(controlPointY2, \" \").concat(next.x, \",\").concat(next.y);\n    }\n    return path;\n}\n/**\n * OKLCH color space conversions\n * OKLCH is perceptually uniform and provides better color scales\n */ // Convert sRGB to linear RGB\nfunction sRGBToLinear(x) {\n    return x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n// Convert linear RGB to sRGB\nfunction linearTosRGB(x) {\n    return x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055;\n}\n// Convert linear RGB to OKLAB\nfunction LRGBToOKLAB(L, M, S) {\n    const l = Math.cbrt(0.4122214708 * L + 0.5363325363 * M + 0.0514459929 * S);\n    const m = Math.cbrt(0.2119034982 * L + 0.6806995451 * M + 0.1073969566 * S);\n    const s = Math.cbrt(0.0883024619 * L + 0.2817188376 * M + 0.6299787005 * S);\n    return {\n        L: 0.2104542553 * l + 0.793617785 * m - 0.0040720468 * s,\n        a: 1.9779984951 * l - 2.428592205 * m + 0.4505937099 * s,\n        b: 0.0259040371 * l + 0.7827717662 * m - 0.808675766 * s\n    };\n}\n// Convert OKLAB to linear RGB\nfunction OKLABToLRGB(L, a, b) {\n    const l = L + 0.3963377774 * a + 0.2158037573 * b;\n    const m = L - 0.1055613458 * a - 0.0638541728 * b;\n    const s = L - 0.0894841775 * a - 1.291485548 * b;\n    const l3 = l * l * l;\n    const m3 = m * m * m;\n    const s3 = s * s * s;\n    return {\n        L: +4.0767416621 * l3 - 3.3077115913 * m3 + 0.2309699292 * s3,\n        M: -1.2684380046 * l3 + 2.6097574011 * m3 - 0.3413193965 * s3,\n        S: -0.0041960863 * l3 - 0.7034186147 * m3 + 1.707614701 * s3\n    };\n}\n// Convert OKLAB to OKLCH\nfunction OKLABToOKLCH(L, a, b) {\n    const C = Math.sqrt(a * a + b * b);\n    let h = Math.atan2(b, a) * 180 / Math.PI;\n    if (h < 0) h += 360;\n    return {\n        L,\n        C,\n        h\n    };\n}\n// Convert OKLCH to OKLAB\nfunction OKLCHToOKLAB(L, C, h) {\n    const hRad = h * Math.PI / 180;\n    const a = C * Math.cos(hRad);\n    const b = C * Math.sin(hRad);\n    return {\n        L,\n        a,\n        b\n    };\n}\n// Convert hex to OKLCH\nfunction hexToOKLCH(hex) {\n    const { r, g, b } = hexToRgb(hex);\n    const lr = sRGBToLinear(r / 255);\n    const lg = sRGBToLinear(g / 255);\n    const lb = sRGBToLinear(b / 255);\n    const lab = LRGBToOKLAB(lr, lg, lb);\n    return OKLABToOKLCH(lab.L, lab.a, lab.b);\n}\n// Convert OKLCH to hex\nfunction OKLCHToHex(L, C, h) {\n    const lab = OKLCHToOKLAB(L, C, h);\n    const rgb = OKLABToLRGB(lab.L, lab.a, lab.b);\n    // Clamp and convert to sRGB\n    const r = Math.max(0, Math.min(255, Math.round(linearTosRGB(rgb.L) * 255)));\n    const g = Math.max(0, Math.min(255, Math.round(linearTosRGB(rgb.M) * 255)));\n    const b = Math.max(0, Math.min(255, Math.round(linearTosRGB(rgb.S) * 255)));\n    return rgbToHex(r, g, b);\n}\n/**\n * Converts a hex color value to HSL components\n */ function hexToHsl(hex) {\n    const rgb = hexToRgb(hex);\n    return rgbToHsl(rgb.r, rgb.g, rgb.b);\n}\n/**\n * Applies curve control points to generate a color scale\n */ function applyColorCurves(baseColor) {\n    let lightnessControlPoints = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], chromaControlPoints = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    try {\n        // Default lightness control points - creates a natural progression\n        const defaultLightnessPoints = [\n            {\n                position: 0,\n                lightness: 0.98\n            },\n            {\n                position: 0.2,\n                lightness: 0.9\n            },\n            {\n                position: 0.4,\n                lightness: 0.75\n            },\n            {\n                position: 0.5,\n                lightness: 0.6\n            },\n            {\n                position: 0.6,\n                lightness: 0.45\n            },\n            {\n                position: 0.8,\n                lightness: 0.25\n            },\n            {\n                position: 1,\n                lightness: 0.1\n            }\n        ];\n        // Default chroma control points (constant saturation across the scale)\n        const defaultChromaPoints = [\n            {\n                position: 0,\n                saturation: 0.7\n            },\n            {\n                position: 0.2,\n                saturation: 0.85\n            },\n            {\n                position: 0.4,\n                saturation: 0.95\n            },\n            {\n                position: 0.5,\n                saturation: 1.0\n            },\n            {\n                position: 0.6,\n                saturation: 0.95\n            },\n            {\n                position: 0.8,\n                saturation: 0.85\n            },\n            {\n                position: 1,\n                saturation: 0.7\n            }\n        ];\n        // Use provided control points or defaults\n        const lightnessPoints = lightnessControlPoints.length > 0 ? lightnessControlPoints : defaultLightnessPoints;\n        const chromaPoints = chromaControlPoints.length > 0 ? chromaControlPoints : defaultChromaPoints;\n        // Convert base color to HSL\n        const { r, g, b } = hexToRgb(baseColor);\n        const baseHsl = rgbToHsl(r, g, b);\n        // Define the color steps to generate\n        const colorSteps = [\n            50,\n            100,\n            200,\n            300,\n            400,\n            500,\n            600,\n            700,\n            800,\n            900,\n            950\n        ];\n        const colorScale = {};\n        // Generate each shade in the scale\n        colorSteps.forEach((step, index)=>{\n            // Calculate position in the scale (0 to 1)\n            const position = index / (colorSteps.length - 1);\n            // Interpolate lightness and chroma (saturation)\n            const lightnessValue = interpolateLightness(position, lightnessPoints);\n            const chromaMultiplier = interpolateChroma(position, chromaPoints);\n            // Adjust saturation based on chroma multiplier (clamped to valid range)\n            const adjustedSaturation = Math.min(1, Math.max(0, baseHsl.s * chromaMultiplier));\n            // Generate the color\n            colorScale[step.toString()] = hslToHex({\n                h: baseHsl.h,\n                s: adjustedSaturation,\n                l: lightnessValue\n            });\n        });\n        return colorScale;\n    } catch (error) {\n        console.error('Error generating color scale:', error);\n        return generateColorScale(baseColor); // Fallback to default scale\n    }\n}\n/**\n * Interpolates lightness value based on position and control points\n */ function interpolateLightness(position, controlPoints) {\n    // Sort control points by position\n    const sortedPoints = [\n        ...controlPoints\n    ].sort((a, b)=>a.position - b.position);\n    // Handle edge cases\n    if (sortedPoints.length === 0) return 0.5; // Default to mid-gray\n    if (sortedPoints.length === 1 && sortedPoints[0].lightness !== undefined) {\n        return sortedPoints[0].lightness;\n    }\n    // Find the two control points that contain our position\n    let lower = sortedPoints[0];\n    let upper = sortedPoints[sortedPoints.length - 1];\n    for(let i = 0; i < sortedPoints.length - 1; i++){\n        if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n            lower = sortedPoints[i];\n            upper = sortedPoints[i + 1];\n            break;\n        }\n    }\n    // If either point doesn't have a lightness value, use a default\n    const lowerLightness = lower.lightness !== undefined ? lower.lightness : 0.5;\n    const upperLightness = upper.lightness !== undefined ? upper.lightness : 0.5;\n    // Calculate interpolation factor\n    const range = upper.position - lower.position;\n    if (range === 0) return lowerLightness;\n    const factor = (position - lower.position) / range;\n    // Linear interpolation\n    return lowerLightness + factor * (upperLightness - lowerLightness);\n}\n/**\n * Interpolates chroma (saturation) multiplier based on position and control points\n */ function interpolateChroma(position, controlPoints) {\n    // Sort control points by position\n    const sortedPoints = [\n        ...controlPoints\n    ].sort((a, b)=>a.position - b.position);\n    // Handle edge cases\n    if (sortedPoints.length === 0) return 1.0; // Default to no change\n    if (sortedPoints.length === 1 && sortedPoints[0].saturation !== undefined) {\n        return sortedPoints[0].saturation;\n    }\n    // Find the two control points that contain our position\n    let lower = sortedPoints[0];\n    let upper = sortedPoints[sortedPoints.length - 1];\n    for(let i = 0; i < sortedPoints.length - 1; i++){\n        if (position >= sortedPoints[i].position && position <= sortedPoints[i + 1].position) {\n            lower = sortedPoints[i];\n            upper = sortedPoints[i + 1];\n            break;\n        }\n    }\n    // If either point doesn't have a saturation value, use a default\n    const lowerSaturation = lower.saturation !== undefined ? lower.saturation : 1.0;\n    const upperSaturation = upper.saturation !== undefined ? upper.saturation : 1.0;\n    // Calculate interpolation factor\n    const range = upper.position - lower.position;\n    if (range === 0) return lowerSaturation;\n    const factor = (position - lower.position) / range;\n    // Linear interpolation\n    return lowerSaturation + factor * (upperSaturation - lowerSaturation);\n}\n/**\n * Convert an HSL color to hex format\n */ function hslToHex(hsl) {\n    const { h, s, l } = hsl;\n    const rgb = hslToRgb(h, s, l);\n    return rgbToHex(rgb.r, rgb.g, rgb.b);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/colorUtils.ts\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fnate%2Fprojects%2Fdesign-system-builder%2Fsrc%2Fcontext%2FDesignSystemContext.tsx%22%2C%22ids%22%3A%5B%22DesignSystemProvider%22%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);